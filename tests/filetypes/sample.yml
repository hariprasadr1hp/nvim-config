# YAML example to test editor settings

# Basic key-value pairs
name: John Doe
age: 30
email: john.doe@example.com
is_active: true

# Lists
languages:
  - Python
  - JavaScript
  - Go
  - Rust

# Nested lists
projects:
  - name: Project A
    languages:
      - Python
      - JavaScript
  - name: Project B
    languages:
      - Go
      - Rust

# Dictionary with nested dictionaries
address:
  street: 123 Main Street
  city: New York
  state: NY
  postal_code: 10001

# Multi-line strings (using the pipe symbol)
description: |
  John is a software developer with experience in multiple programming
  languages. He enjoys working on both backend and frontend projects
  and has been involved in open-source communities.

# Multi-line strings (using the greater-than symbol)
brief_description: >
  John is a software developer. He has experience with multiple
  programming languages and enjoys backend and frontend development.

# Anchors and aliases
default_settings: &default
  theme: dark
  language: en
  timezone: UTC

# Use alias to reference the default settings
user_profile:
  name: John Doe
  settings:
    <<: *default
    language: fr

# Complex key (using a question mark for multi-line keys)
? |
  complex
  multiline
  key
: value for complex key

# Floating-point numbers, integers, booleans, nulls
pi_value: 3.14159
max_connections: 100
is_enabled: false
no_value: null

# Using environment variables (often in CI/CD pipelines or Docker Compose)
env_variables:
  DATABASE_URL: ${DATABASE_URL}
  SECRET_KEY: ${SECRET_KEY}
  DEBUG: ${DEBUG}

# YAML for Docker Compose (example of a more complex structure)
version: '3.8'
services:
  web:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./web:/usr/share/nginx/html
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db
  db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: example_user
      POSTGRES_PASSWORD: example_pass
      POSTGRES_DB: example_db
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:

# Example of using an array of objects
users:
  - name: Alice
    role: admin
    email: alice@example.com
  - name: Bob
    role: user
    email: bob@example.com

# Key-value pairs with different data types
settings:
  app_name: "MyApp"
  debug_mode: false
  max_users: 50
  timeout: 30.5

# A more complex nested structure
application:
  name: MyApp
  version: 1.0
  settings:
    max_connections: 100
    max_timeout: 30
    allow_signup: true
    logging:
      level: debug
      log_to_file: true
    security:
      encryption: true
      allowed_ips:
        - "192.168.0.1"
        - "192.168.0.2"
        - "10.0.0.0/16"

# Boolean expressions (yes/no, true/false)
features:
  signup_enabled: yes
  notifications_enabled: no
  multi_tenancy: true

# Chaining of YAML operations with the pipe operator
pipeline:
  steps:
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests
      run: |
        pytest tests/

# Tagging
custom_tag: !!str "This is a custom string"

# Ordered lists (YAML does not natively support ordered dictionaries, but !!omap can be used)
ordered_dict: !!omap
  - id: 1
  - name: Example
  - description: An ordered map example

# YAML for Kubernetes resource definition (another example of a complex structure)
apiVersion: v1
kind: Pod
metadata:
  name: my-app
  labels:
    app: web
spec:
  containers:
    - name: my-app-container
      image: myapp:latest
      ports:
        - containerPort: 8080
      env:
        - name: DATABASE_URL
          value: "postgres://user:password@db:5432/mydb"
    - name: sidecar-container
      image: busybox
      args:
        - sleep
        - "3600"
  volumes:
    - name: my-volume
      persistentVolumeClaim:
        claimName: my-pvc
